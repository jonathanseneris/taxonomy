generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Application {
  id              String   @id @default(cuid())
  submittedOn     DateTime @db.Timestamptz(0)
  viewedOn        DateTime @db.Timestamptz(0)
  statusChangedOn DateTime @db.Timestamptz(0)
  status          String   @default("Draft") @db.VarChar(255)
  statement       String   @default("")
  about           String   @default("")
  sample          String   @default("")
  user            User     @relation(fields: [userId], references: [id])
  workshop        Workshop @relation(fields: [workshopId], references: [id])
  userId          String
  workshopId      String   @db.VarChar(255)
}

model EmailSent {
  id        Int      @id @default(autoincrement())
  to        String   @db.VarChar(255)
  subject   String   @db.VarChar(255)
  html      String   @default("")
  createdAt DateTime @db.Timestamptz(0)
}

model Meeting {
  id               Int          @id @default(autoincrement())
  startTime        DateTime     @db.Timestamptz(0)
  meetingAttendees User[]
  submissions      Submission[]
  Workshop         Workshop     @relation(fields: [workshopId], references: [id])
  workshopId       String       @db.VarChar(255)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id])

  @@map(name: "sessions")
}

model SubmissionReview {
  id           Int        @id @default(autoincrement())
  date         DateTime   @db.Timestamptz(0)
  lastUpdate   DateTime   @db.Timestamptz(0)
  submission   Submission @relation(fields: [submissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  workshop     Workshop   @relation(fields: [workshopId], references: [id])
  submissionId String     @db.VarChar(255)
  userId       String
  workshopId   String     @db.VarChar(255)
}

model SubmissionSlot {
  id             Int         @id @default(autoincrement())
  workshopId     String      @db.VarChar(255)
  dueDate        DateTime    @db.Timestamptz(0)
  workshopDate   DateTime    @db.Timestamptz(0)
  createdAt      DateTime    @db.Timestamptz(0)
  lastModifiedAt DateTime    @db.Timestamptz(0)
  Submission     Submission? @relation(fields: [submissionId], references: [id])
  User           User?       @relation(fields: [userId], references: [id])
  Workshop       Workshop    @relation(fields: [workshopId], references: [id])
  submissionId   String?     @db.VarChar(255)
  userId         String?
}

model Submission {
  id                String             @id @default(cuid())
  title             String             @db.VarChar(255)
  submissionDueDate DateTime           @db.Timestamptz(0)
  submissionDate    DateTime           @db.Timestamptz(0)
  password          String?            @db.VarChar(255)
  content           String             @default("")
  reviews           SubmissionReview[]
  Meeting           Meeting?           @relation(fields: [meetingId], references: [id])
  User              User?              @relation(fields: [userId], references: [id])
  Workshop          Workshop?          @relation(fields: [workshopId], references: [id])
  SubmissionSlot    SubmissionSlot[]
  meetingId         Int?
  userId            String?
  workshopId        String?            @db.VarChar(255)
}

model Tag {
  name        String  @id @default(cuid())
  category    String? @db.VarChar(255)
  displayName String  @db.VarChar(255)
}

model User {
  id       String    @id @default(cuid())
  image    String?
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  email            String             @unique(map: "user_email_unique") @db.VarChar(255)
  emailVerified    DateTime?          @db.Timestamptz(0)
  bio              String             @default("")
  name             String?            @default("")
  firstName        String?            @default("")
  middleName       String?            @default("")
  lastName         String?            @default("")
  active           Boolean            @default(true)
  confirmed        Boolean            @default(false)
  location         String             @default("")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  lastModifiedAt   DateTime           @default(now())
  isLockedOut      Boolean            @default(false)
  accounts         Account[]
  applications     Application[]
  submissionSlots  SubmissionSlot[]
  submissions      Submission[]
  workshops        Workshop[]
  Meeting          Meeting?           @relation(fields: [meetingId], references: [id])
  meetingId        Int?
  SubmissionReview SubmissionReview[]

  @@map(name: "users")
}

model Workshop {
  id               String             @id @default(cuid()) // @zod.optional()
  targetSize       Int
  startDate        DateTime           @db.Timestamptz(0)
  paid             Boolean            @default(false)
  price            Decimal            @db.Decimal(10, 0)
  submissionLength String             @db.VarChar(255)
  name             String             @db.VarChar(255)
  description      String             @default("")
  open             Boolean            @default(true)
  archived         Boolean            @default(false)
  applications     Application[]
  meetings         Meeting[]
  submissionSlots  SubmissionSlot[]
  submissions      Submission[]
  SubmissionReview SubmissionReview[]
  createdBy        User               @relation(fields: [userId], references: [id])
  createdAt        DateTime?          @db.Timestamptz(0)
  userId           String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
