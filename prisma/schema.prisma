generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = "true"
  imports               = "null"
  prismaJsonNullability = "true"
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = "true"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                                                        String               @id @default(cuid()) @db.VarChar(255)
  image                                                     String?
  stripeCustomerId                                          String?              @unique @map("stripe_customer_id")
  stripeSubscriptionId                                      String?              @unique @map("stripe_subscription_id")
  stripePriceId                                             String?              @map("stripe_price_id")
  stripeCurrentPeriodEnd                                    DateTime?            @map("stripe_current_period_end")
  email                                                     String               @unique(map: "user_email_unique") @db.VarChar(255)
  emailVerified                                             DateTime?            @db.Timestamptz(0)
  bio                                                       String               @default("")
  name                                                      String               @default("") @db.VarChar(255)
  active                                                    Boolean              @default(true)
  confirmed                                                 Boolean              @default(false)
  location                                                  String               @default("") @db.VarChar(255)
  first_name                                                String               @default("") @db.VarChar(255)
  middle_name                                               String               @default("") @db.VarChar(255)
  last_name                                                 String               @default("") @db.VarChar(255)
  phone                                                     String               @default("") @db.VarChar(255)
  created_at                                                DateTime             @db.Timestamptz(0)
  last_modified_at                                          DateTime             @db.Timestamptz(0)
  applications                                              applications[]
  meetings_attendees                                        meetings_attendees[]
  meetings_invitees                                         meetings_invitees[]
  submission_reviews_submission_reviews_reviewer_idTousers  submission_reviews[] @relation("submission_reviews_reviewer_idTousers")
  submission_reviews_submission_reviews_submitter_idTousers submission_reviews?  @relation("submission_reviews_submitter_idTousers")
  submission_slots                                          submission_slots?
  submissions                                               submissions[]
  users_logins                                              users_logins[]
  users_workshops                                           users_workshops[]
  workshops                                                 workshops[]
  workshops_users                                           workshops_users[]

  @@map("users")
}

model applications {
  id                String    @id @db.VarChar(255)
  user_id           String    @db.VarChar(255)
  workshop_id       String    @db.VarChar(255)
  submitted_on      DateTime  @db.Timestamptz(0)
  viewed_on         DateTime  @db.Timestamptz(0)
  status_changed_on DateTime  @db.Timestamptz(0)
  status            String    @default("Draft") @db.VarChar(255)
  statement         String    @default("")
  about             String    @default("")
  sample            String    @default("")
  users             User      @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "applications_user_id_foreign")
  workshops         workshops @relation(fields: [workshop_id], references: [id], onDelete: NoAction, map: "applications_workshop_id_foreign")
}

model emails_sent {
  id         Int      @id @default(autoincrement())
  to         String   @db.VarChar(255)
  subject    String   @db.VarChar(255)
  html       String   @default("")
  created_at DateTime @db.Timestamptz(0)
}

model meetings {
  id                 Int                  @id @default(autoincrement())
  workshop_id        String               @db.VarChar(255)
  start_time         DateTime             @db.Timestamptz(0)
  workshops          workshops            @relation(fields: [workshop_id], references: [id], onDelete: NoAction, map: "meetings_workshop_id_foreign")
  meetings_attendees meetings_attendees[]
  meetings_invitees  meetings_invitees[]
  submissions        submissions[]
}

model meetings_attendees {
  meetings_id Int
  users_id    String   @db.VarChar(255)
  meetings    meetings @relation(fields: [meetings_id], references: [id], onDelete: Cascade, map: "meetings_attendees_meetings_id_foreign")
  users       User     @relation(fields: [users_id], references: [id], onDelete: Cascade, map: "meetings_attendees_users_id_foreign")

  @@id([meetings_id, users_id])
}

model meetings_invitees {
  meetings_id Int
  users_id    String   @db.VarChar(255)
  meetings    meetings @relation(fields: [meetings_id], references: [id], onDelete: Cascade, map: "meetings_invitees_meetings_id_foreign")
  users       User     @relation(fields: [users_id], references: [id], onDelete: Cascade, map: "meetings_invitees_users_id_foreign")

  @@id([meetings_id, users_id])
}

model mikro_orm_migrations {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  executed_at DateTime? @default(now()) @db.Timestamptz(6)
}

model submission_reviews {
  id                                           Int         @id @default(autoincrement())
  submission_id                                String      @db.VarChar(255)
  reviewer_id                                  String      @db.VarChar(255)
  workshop_id                                  String      @db.VarChar(255)
  date                                         DateTime    @db.Timestamptz(0)
  last_update                                  DateTime    @db.Timestamptz(0)
  submitter_id                                 String      @unique(map: "submission_reviews_submitter_id_unique") @db.VarChar(255)
  users_submission_reviews_reviewer_idTousers  User        @relation("submission_reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onDelete: NoAction, map: "submission_reviews_reviewer_id_foreign")
  submissions                                  submissions @relation(fields: [submission_id], references: [id], onDelete: NoAction, map: "submission_reviews_submission_id_foreign")
  users_submission_reviews_submitter_idTousers User        @relation("submission_reviews_submitter_idTousers", fields: [submitter_id], references: [id], onDelete: NoAction, map: "submission_reviews_submitter_id_foreign")
  workshops                                    workshops   @relation(fields: [workshop_id], references: [id], onDelete: NoAction, map: "submission_reviews_workshop_id_foreign")
}

model submission_slots {
  id               Int         @id @default(autoincrement())
  workshop_id      String      @db.VarChar(255)
  due_date         DateTime    @db.Timestamptz(0)
  workshop_date    DateTime    @db.Timestamptz(0)
  submitter_id     String      @unique(map: "submission_slots_submitter_id_unique") @db.VarChar(255)
  submission_id    String      @unique(map: "submission_slots_submission_id_unique") @db.VarChar(255)
  created_at       DateTime    @db.Timestamptz(0)
  last_modified_at DateTime    @db.Timestamptz(0)
  submissions      submissions @relation(fields: [submission_id], references: [id], onDelete: NoAction, map: "submission_slots_submission_id_foreign")
  users            User        @relation(fields: [submitter_id], references: [id], onDelete: NoAction, map: "submission_slots_submitter_id_foreign")
  workshops        workshops   @relation(fields: [workshop_id], references: [id], onDelete: NoAction, map: "submission_slots_workshop_id_foreign")
}

model submissions {
  id                  String               @id @db.VarChar(255)
  title               String               @db.VarChar(255)
  author_id           String               @db.VarChar(255)
  workshop_id         String               @db.VarChar(255)
  submission_due_date DateTime             @db.Timestamptz(0)
  submission_date     DateTime             @db.Timestamptz(0)
  meeting_id          Int
  password            String?              @db.VarChar(255)
  content             String               @default("")
  submission_reviews  submission_reviews[]
  submission_slots    submission_slots?
  users               User                 @relation(fields: [author_id], references: [id], onDelete: NoAction, map: "submissions_author_id_foreign")
  meetings            meetings             @relation(fields: [meeting_id], references: [id], onDelete: NoAction, map: "submissions_meeting_id_foreign")
  workshops           workshops            @relation(fields: [workshop_id], references: [id], onDelete: NoAction, map: "submissions_workshop_id_foreign")
}

model tags {
  name           String           @id @db.VarChar(255)
  display_name   String           @db.VarChar(255)
  category       String           @db.VarChar(255)
  workshops_tags workshops_tags[]
}

model users_logins {
  id         BigInt   @id @default(autoincrement())
  login_time DateTime @db.Timestamptz(0)
  ip_address String   @default("") @db.VarChar(255)
  user_id    String   @db.VarChar(255)
  users      User     @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "users_logins_user_id_foreign")

  @@index([user_id], map: "user_id")
}

model users_workshops {
  users_id     String    @db.VarChar(255)
  workshops_id String    @db.VarChar(255)
  users        User      @relation(fields: [users_id], references: [id], onDelete: Cascade, map: "users_workshops_users_id_foreign")
  workshops    workshops @relation(fields: [workshops_id], references: [id], onDelete: Cascade, map: "users_workshops_workshops_id_foreign")

  @@id([users_id, workshops_id])
}

model workshops {
  id                 String               @id @db.VarChar(255)
  target_size        Int
  start_date         DateTime             @db.Timestamptz(0)
  paid               Boolean              @default(false)
  price              Decimal              @db.Decimal(10, 0)
  submission_length  String               @db.VarChar(255)
  name               String               @default("") @db.VarChar(255)
  description        String               @default("")
  open               Boolean              @default(true)
  archived           Boolean              @default(false)
  leader_id          String               @db.VarChar(255)
  leader_bio         String               @default("") @db.VarChar(255)
  applications       applications[]
  meetings           meetings[]
  submission_reviews submission_reviews[]
  submission_slots   submission_slots[]
  submissions        submissions[]
  users_workshops    users_workshops[]
  users              User                 @relation(fields: [leader_id], references: [id], onDelete: NoAction, map: "workshops_leader_id_foreign")
  workshops_tags     workshops_tags[]
  workshops_users    workshops_users[]
}

model workshops_tags {
  workshops_id String    @db.VarChar(255)
  tags_name    String    @db.VarChar(255)
  tags         tags      @relation(fields: [tags_name], references: [name], onDelete: Cascade, map: "workshops_tags_tags_name_foreign")
  workshops    workshops @relation(fields: [workshops_id], references: [id], onDelete: Cascade, map: "workshops_tags_workshops_id_foreign")

  @@id([workshops_id, tags_name])
}

model workshops_users {
  workshops_id String    @db.VarChar(255)
  users_id     String    @db.VarChar(255)
  users        User      @relation(fields: [users_id], references: [id], onDelete: Cascade, map: "workshops_users_users_id_foreign")
  workshops    workshops @relation(fields: [workshops_id], references: [id], onDelete: Cascade, map: "workshops_users_workshops_id_foreign")

  @@id([workshops_id, users_id])
}
